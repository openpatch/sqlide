{"version":3,"file":"sqljs-worker.js","sources":["../../src/client/sqljs-worker/sqljsWorker.ts"],"sourcesContent":["//@ts-ignore\r\nimportScripts('../lib/sql.js/sql-wasm.js');\r\n\r\n//@ts-ignore\r\nvar initsql = initSqlJs({\r\n    locateFile: name => (self.location + \"\").replace(\"worker/sqljs-worker.js\", \"\") + 'lib/sql.js/' + name\r\n   });\r\nvar db;\r\nvar SQL;\r\n\r\nfunction worker(event) {\r\n    var buff; var result;\r\n    var data = event.data;\r\n    var config = data[\"config\"] ? data[\"config\"] : {};\r\n    try {\r\n        switch (data && data[\"action\"]) {\r\n            case \"open\":\r\n                buff = data[\"buffer\"];\r\n                createDb(SQL, buff && new Uint8Array(buff));\r\n                //@ts-ignore\r\n                return postMessage({\r\n                    id: data[\"id\"],\r\n                    ready: true\r\n                });\r\n            case \"exec\":\r\n                if (db === null) {\r\n                    createDb(SQL, undefined);\r\n                }\r\n                if (!data[\"sql\"]) {\r\n                    throw \"exec: Missing query string\";\r\n                }\r\n                //@ts-ignore\r\n                return postMessage({\r\n                    id: data[\"id\"],\r\n                    results: db.exec(data[\"sql\"], data[\"params\"], config)\r\n                });\r\n            case \"each\":\r\n                if (db === null) {\r\n                    createDb(SQL, undefined);\r\n                }\r\n                var callback = function callback(row) {\r\n                    //@ts-ignore\r\n                    return postMessage({\r\n                        id: data[\"id\"],\r\n                        row: row,\r\n                        finished: false\r\n                    });\r\n                };\r\n                var done = function done() {\r\n                    //@ts-ignore\r\n                    return postMessage({\r\n                        id: data[\"id\"],\r\n                        finished: true\r\n                    });\r\n                };\r\n                return db.each(data[\"sql\"], data[\"params\"], callback, done, config);\r\n            case \"export\":\r\n                buff = db[\"export\"]();\r\n                result = {\r\n                    id: data[\"id\"],\r\n                    results: [\r\n                        {\r\n                            buffer: buff\r\n                        }\r\n                    ]\r\n                };\r\n                try {\r\n                    //@ts-ignore\r\n                    return postMessage(result);\r\n                } catch (error) {\r\n                    //@ts-ignore\r\n                    return postMessage(result);\r\n                }\r\n            case \"close\":\r\n                if (db) {\r\n                    db.close();\r\n                }\r\n                //@ts-ignore\r\n                return postMessage({\r\n                    id: data[\"id\"]\r\n                });\r\n            default:\r\n                throw new Error(\"Invalid action : \" + (data && data[\"action\"]));\r\n        }\r\n\r\n    } catch (err) {\r\n        \r\n        //@ts-ignore\r\n        return postMessage({\r\n            id: data[\"id\"],\r\n            error: err[\"message\"]\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nself.onmessage = (event) => {\r\n    if (db == null) {\r\n        initsql.then((SQL1) => {\r\n            SQL = SQL1;\r\n            db = createDb(SQL1, undefined);\r\n            worker(event);\r\n        }).catch((err) => {\r\n            console.log(err);\r\n            //@ts-ignore\r\n            return postMessage({\r\n                id: this[\"data\"][\"id\"],\r\n                error: err[\"message\"]\r\n            });\r\n        })\r\n    } else {\r\n        worker(event);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction createDb(SQL, buffer) {\r\n\r\n    db = new SQL.Database(buffer);\r\n\r\n    db.create_function(\"isDate\", function (inputText) {\r\n\r\n        if (inputText == null) return true;\r\n        if (typeof inputText != 'string') return false;\r\n\r\n        // var dateformat = /^(0?[1-9]|[12][0-9]|3[01])[\\/\\-](0?[1-9]|1[012])[\\/\\-]\\d{4}$/;\r\n        var dateformat = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n        // Match the date format through regular expression\r\n        if (inputText.match(dateformat)) {\r\n            //Test which seperator is used '/' or '-'\r\n            var opera1 = inputText.split('/');\r\n            var opera2 = inputText.split('-');\r\n            var lopera1 = opera1.length;\r\n            var lopera2 = opera2.length;\r\n            // Extract the string into month, date and year\r\n            if (lopera1 > 1) {\r\n                var pdate = inputText.split('/');\r\n            }\r\n            else if (lopera2 > 1) {\r\n                var pdate = inputText.split('-');\r\n            }\r\n            if (pdate.length != 3) return false;\r\n            var dd = parseInt(pdate[2]);\r\n            var mm = parseInt(pdate[1]);\r\n            var yy = parseInt(pdate[0]);\r\n            // Create list of days of a month [assume there is no leap year by default]\r\n            var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n            if (mm == 1 || mm > 2) {\r\n                if (dd > ListofDays[mm - 1]) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (mm == 2) {\r\n                var lyear = false;\r\n                if ((!(yy % 4) && yy % 100) || !(yy % 400)) {\r\n                    lyear = true;\r\n                }\r\n                if ((lyear == false) && (dd >= 29)) {\r\n                    return false;\r\n                }\r\n                if ((lyear == true) && (dd > 29)) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            return true;\r\n\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    });\r\n\r\n    db.create_function(\"isDateTime\", function (inputText) {\r\n        if (inputText == null) return true;\r\n\r\n        if (typeof inputText != 'string') return false;\r\n\r\n        // var dateformat = /^(0?[1-9]|[12][0-9]|3[01])[\\/\\-](0?[1-9]|1[012])[\\/\\-]\\d{4}$/;\r\n        var dateformat = /^\\d{4}[\\-](0[1-9]|1[012])[\\-](0[1-9]|[12][0-9]|3[01]) ([01][0-9]|2[0123]):([0-5][0-9]):([0-5][0-9])$/;\r\n        // Match the date format through regular expression\r\n        if (inputText.match(dateformat)) {\r\n            var splitStr = inputText.split(' ');\r\n            var dateStr = splitStr[0];\r\n            //var timeStr = splitStr[1];\r\n\r\n            // if (dateStr.length != 3) return false;\r\n            // var dd = parseInt(dateStr[2]);\r\n            // var mm = parseInt(dateStr[1]);\r\n            // var yy = parseInt(dateStr[0]);\r\n            if (dateStr.length != 10) return false;\r\n            var dd = parseInt(dateStr.substring(8, 10));\r\n            var mm = parseInt(dateStr.substring(5, 7));\r\n            var yy = parseInt(dateStr.substring(0, 4));\r\n            // Create list of days of a month [assume there is no leap year by default]\r\n            var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n            if (mm == 1 || mm > 2) {\r\n                if (dd > ListofDays[mm - 1]) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (mm == 2) {\r\n                var lyear = false;\r\n                if ((!(yy % 4) && yy % 100) || !(yy % 400)) {\r\n                    lyear = true;\r\n                }\r\n                if ((lyear == false) && (dd >= 29)) {\r\n                    return false;\r\n                }\r\n                if ((lyear == true) && (dd > 29)) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            return true;\r\n\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    });\r\n\r\n    db.create_function(\"isTime\", function (inputText) {\r\n        if (inputText == null) return true;\r\n\r\n        if (typeof inputText != 'string') return false;\r\n\r\n        var timeformat = /^([01][0-9]|2[0123]):([0-5][0-9]):([0-5][0-9])$/;\r\n        // Match the date format through regular expression\r\n        return inputText.match(timeformat) != null;\r\n    });\r\n\r\n    db.create_function(\"concat\", function (arg) {\r\n        if (arguments == null) return \"\";\r\n        let erg = \"\";\r\n        for(let i = 0; i < arguments.length; i++){\r\n            erg += (\"\" + arguments[i]);\r\n        }\r\n        return erg;\r\n    })\r\n\r\n    db.create_function(\"month\", function(inputText){\r\n        var dateformat = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n        let match = inputText.match(dateformat);\r\n        if (match){\r\n            return Number(match[1]);\r\n        }\r\n        return -1;\r\n    })\r\n\r\n    db.create_function(\"day\", function(inputText){\r\n        var dateformat = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n        let match = inputText.match(dateformat);\r\n        if (match){\r\n            return Number(match[2]);\r\n        }\r\n        return -1;\r\n    })\r\n\r\n    db.create_function(\"year\", function(inputText){\r\n        var dateformat = /^(\\d{4})[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n        let match = inputText.match(dateformat);\r\n        if (match){\r\n            return Number(match[1]);\r\n        }\r\n        return -1;\r\n    })\r\n\r\n\r\n    return db;\r\n}\r\n\r\n"],"names":["initsql","name","db","SQL","worker","event","buff","result","data","config","createDb","callback","row","done","err","SQL1","this","buffer","inputText","dateformat","opera1","opera2","lopera1","lopera2","pdate","dd","mm","yy","ListofDays","lyear","splitStr","dateStr","timeformat","arg","erg","i","match"],"mappings":"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"}