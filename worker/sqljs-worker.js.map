{"version":3,"file":"sqljs-worker.js","sources":["../../src/client/sqljs-worker/sqljsWorker.ts"],"sourcesContent":["//@ts-ignore\nimportScripts('../lib/sql.js/sql-wasm.js');\n\n//@ts-ignore\nvar initsql = initSqlJs({\n    locateFile: name => (self.location + \"\").replace(\"worker/sqljs-worker.js\", \"\") + 'lib/sql.js/' + name\n   });\nvar db;\nvar SQL;\n\nfunction worker(event) {\n    var buff; var result;\n    var data = event.data;\n    var config = data[\"config\"] ? data[\"config\"] : {};\n    try {\n        switch (data && data[\"action\"]) {\n            case \"open\":\n                buff = data[\"buffer\"];\n                createDb(SQL, buff && new Uint8Array(buff));\n                //@ts-ignore\n                return postMessage({\n                    id: data[\"id\"],\n                    ready: true\n                });\n            case \"exec\":\n                if (db === null) {\n                    createDb(SQL, undefined);\n                }\n                if (!data[\"sql\"]) {\n                    throw \"exec: Missing query string\";\n                }\n                //@ts-ignore\n                return postMessage({\n                    id: data[\"id\"],\n                    results: db.exec(data[\"sql\"], data[\"params\"], config)\n                });\n            case \"each\":\n                if (db === null) {\n                    createDb(SQL, undefined);\n                }\n                var callback = function callback(row) {\n                    //@ts-ignore\n                    return postMessage({\n                        id: data[\"id\"],\n                        row: row,\n                        finished: false\n                    });\n                };\n                var done = function done() {\n                    //@ts-ignore\n                    return postMessage({\n                        id: data[\"id\"],\n                        finished: true\n                    });\n                };\n                return db.each(data[\"sql\"], data[\"params\"], callback, done, config);\n            case \"export\":\n                buff = db[\"export\"]();\n                result = {\n                    id: data[\"id\"],\n                    results: [\n                        {\n                            buffer: buff\n                        }\n                    ]\n                };\n                try {\n                    //@ts-ignore\n                    return postMessage(result);\n                } catch (error) {\n                    //@ts-ignore\n                    return postMessage(result);\n                }\n            case \"close\":\n                if (db) {\n                    db.close();\n                }\n                //@ts-ignore\n                return postMessage({\n                    id: data[\"id\"]\n                });\n            default:\n                throw new Error(\"Invalid action : \" + (data && data[\"action\"]));\n        }\n\n    } catch (err) {\n        \n        //@ts-ignore\n        return postMessage({\n            id: data[\"id\"],\n            error: err[\"message\"]\n        });\n    }\n\n}\n\n\nself.onmessage = (event) => {\n    if (db == null) {\n        initsql.then((SQL1) => {\n            SQL = SQL1;\n            db = createDb(SQL1, undefined);\n            worker(event);\n        }).catch((err) => {\n            console.log(err);\n            //@ts-ignore\n            return postMessage({\n                id: this[\"data\"][\"id\"],\n                error: err[\"message\"]\n            });\n        })\n    } else {\n        worker(event);\n    }\n}\n\n\n\nfunction createDb(SQL, buffer) {\n\n    db = new SQL.Database(buffer);\n\n    db.create_function(\"isDate\", function (inputText) {\n\n        if (inputText == null) return true;\n        if (typeof inputText != 'string') return false;\n\n        // var dateformat = /^(0?[1-9]|[12][0-9]|3[01])[\\/\\-](0?[1-9]|1[012])[\\/\\-]\\d{4}$/;\n        var dateformat = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\n        // Match the date format through regular expression\n        if (inputText.match(dateformat)) {\n            //Test which seperator is used '/' or '-'\n            var opera1 = inputText.split('/');\n            var opera2 = inputText.split('-');\n            var lopera1 = opera1.length;\n            var lopera2 = opera2.length;\n            // Extract the string into month, date and year\n            if (lopera1 > 1) {\n                var pdate = inputText.split('/');\n            }\n            else if (lopera2 > 1) {\n                var pdate = inputText.split('-');\n            }\n            if (pdate.length != 3) return false;\n            var dd = parseInt(pdate[2]);\n            var mm = parseInt(pdate[1]);\n            var yy = parseInt(pdate[0]);\n            // Create list of days of a month [assume there is no leap year by default]\n            var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n            if (mm == 1 || mm > 2) {\n                if (dd > ListofDays[mm - 1]) {\n                    return false;\n                }\n            }\n            if (mm == 2) {\n                var lyear = false;\n                if ((!(yy % 4) && yy % 100) || !(yy % 400)) {\n                    lyear = true;\n                }\n                if ((lyear == false) && (dd >= 29)) {\n                    return false;\n                }\n                if ((lyear == true) && (dd > 29)) {\n                    return false;\n                }\n                return true;\n            }\n\n            return true;\n\n        }\n        else {\n            return false;\n        }\n    });\n\n    db.create_function(\"isDateTime\", function (inputText) {\n        if (inputText == null) return true;\n\n        if (typeof inputText != 'string') return false;\n\n        // var dateformat = /^(0?[1-9]|[12][0-9]|3[01])[\\/\\-](0?[1-9]|1[012])[\\/\\-]\\d{4}$/;\n        var dateformat = /^\\d{4}[\\-](0[1-9]|1[012])[\\-](0[1-9]|[12][0-9]|3[01]) ([01][0-9]|2[0123]):([0-5][0-9]):([0-5][0-9])$/;\n        // Match the date format through regular expression\n        if (inputText.match(dateformat)) {\n            var splitStr = inputText.split(' ');\n            var dateStr = splitStr[0];\n            //var timeStr = splitStr[1];\n\n            // if (dateStr.length != 3) return false;\n            // var dd = parseInt(dateStr[2]);\n            // var mm = parseInt(dateStr[1]);\n            // var yy = parseInt(dateStr[0]);\n            if (dateStr.length != 10) return false;\n            var dd = parseInt(dateStr.substring(8, 10));\n            var mm = parseInt(dateStr.substring(5, 7));\n            var yy = parseInt(dateStr.substring(0, 4));\n            // Create list of days of a month [assume there is no leap year by default]\n            var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n            if (mm == 1 || mm > 2) {\n                if (dd > ListofDays[mm - 1]) {\n                    return false;\n                }\n            }\n            if (mm == 2) {\n                var lyear = false;\n                if ((!(yy % 4) && yy % 100) || !(yy % 400)) {\n                    lyear = true;\n                }\n                if ((lyear == false) && (dd >= 29)) {\n                    return false;\n                }\n                if ((lyear == true) && (dd > 29)) {\n                    return false;\n                }\n                return true;\n            }\n\n            return true;\n\n        }\n        else {\n            return false;\n        }\n    });\n\n    db.create_function(\"isTime\", function (inputText) {\n        if (inputText == null) return true;\n\n        if (typeof inputText != 'string') return false;\n\n        var timeformat = /^([01][0-9]|2[0123]):([0-5][0-9]):([0-5][0-9])$/;\n        // Match the date format through regular expression\n        return inputText.match(timeformat) != null;\n    });\n\n    db.create_function(\"concat\", function () {\n        console.log(\"Hier!\");\n        if (arguments == null) return \"\";\n        let erg = \"\";\n        for(let i = 0; i < arguments.length; i++){\n            erg += (\"\" + arguments[i]);\n        }\n        return erg;\n    })\n\n    return db;\n}\n\n"],"names":["initsql","name","db","SQL","worker","event","buff","result","data","config","createDb","callback","row","done","err","SQL1","this","buffer","inputText","dateformat","opera1","opera2","lopera1","lopera2","pdate","dd","mm","yy","ListofDays","lyear","splitStr","dateStr","timeformat","erg","i"],"mappings":"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"}